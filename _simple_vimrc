" Common Vim Settings"{{{
set nocompatible                    " do not force it to be vi compatible
set number                          " set line numbers
set relativenumber                  " relative line numbers are awesome.
set numberwidth=5                   " the number of columns for line numbers
set mouse=                          " disable mouse clicks for all modes
set backspace=eol,indent,start      " characters that backspace can erase
set wrap                            " do not wrap lines
set ruler                           " ruler format can be set; but I use vim-airline
set noerrorbells novisualbell t_vb= " I have no idea what to do here
au GUIEnter * set vb t_vb=          " Values get reset when GUI starts
set pastetoggle=<F2>                " disable indenting while pasting code
set hidden                          " allows us to move away from unsaved buffers
set noshowmatch                     " do not jump to matching brace
filetype plugin on                  " Detect filetype plugin and source them
filetype indent on                  " Indent based on filetypes
syntax on                           " Switch on syntax highlighting
set tabstop=4                       " One tab is 4 spaces
set shiftwidth=4                    " Indent to use 4 spaces
set expandtab                       " no more tabs; replace with spaces
set softtabstop=4                   " backspace can run over 4 spaces in one key press
set scrolloff=0                     " retain 3 lines for context while scrolling
set autoindent                      " automatically indent the files
set incsearch                       " search before we press enter for search
" set hlsearch                       " highlight search
set smartindent                     " removed since it interferes with python commenting
"if exists('+colorcolumn')
"    set colorcolumn=80             " highlights the 80th column
"endif
set textwidth=0                     " no text width (moved to ft specific)
set cursorline                      " highlights the row the cursor is on
"set cursorcolumn                    " highlights the current column
set lazyredraw                      " to speed up the effects of highlighting row or column
set laststatus=2                    " to display the status line always
set showtabline=2                   " to show the tab line always
set autochdir                       " change to the directory of the current file
set splitright                      " the new windows opens on the right
set splitbelow                      " horizontal split below
set encoding=utf-8
set termencoding=utf-8
set printoptions=number:y
set winaltkeys=no                   " disable use of alt keys for accessing gvim menus
set conceallevel=0
set concealcursor=""
set fo+=jn
"set clipboard=unnamed "interferes with regular yank
"set exrc
"set secure
set termguicolors                   " use gui colors in terminal

set undofile
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

set foldtext=foldtext()
set foldmethod=marker

""}}}

" gui Vim (gvim/macvim) - font/display settings"{{{
if has("gui_running")
    if has("gui_gtk2")
        set guifont=Source\ Code\ Pro\ for\ Powerline
    elseif has("gui_macvim")
        set antialias
        set guifont=Source\ Code\ Pro\ for\ Powerline:h11
    elseif has("gui_win32")
        set guifont=Consolas:h9:cANSI
    endif

    set guioptions-=m " removes the menu bar
    set guioptions-=T " removes the tool bar
    set guioptions-=L " removes the left scroll bar with Nerd Tree
    set guioptions-=r " removes the right scroll bar
    set guioptions-=e " removes the tab label
    set columns=120   " specifies the width of the GVim window
    set lines=120     " specifies the height of the GVim window
endif
""}}}

let g:vim_folder = '~/.vim/'
let g:vimrc = g:vim_folder . '_vimrc'
let g:local_vimrc = g:vim_folder . '_local_vimrc'
exec "set backupdir=".g:vim_folder."vimbackup//"
exec "set dir=".g:vim_folder."vimswap//"
exec "set undodir=".g:vim_folder."vimundo//"

" Vim keyboard Shortcuts"{{{
let mapleader=$LEADER
if (mapleader == '')
    let mapleader=','
endif

" Show current highlight configuration command
map <leader>hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" mappings to avoid common mistakes in Vim
cnoreabbrev <expr> W getcmdtype() == ":" && getcmdline() == 'W' ? 'w' : 'W'
cnoreabbrev <expr> Q getcmdtype() == ":" && getcmdline() == 'Q' ? 'q' : 'Q'

" mappings to avoid going to command mode for common operations
vnoremap ; <Esc>:
nnoremap ; <Esc>:
vnoremap ;q :q<cr>
nnoremap ;q :q<cr>
vnoremap ;w :w<cr>
nnoremap ;w :w<cr>
vnoremap ;d :bd<cr>
nnoremap ;d :bd<cr>
vnoremap ;s :split<cr>
nnoremap ;s :split<cr>
vnoremap ;v :vsplit<cr>
nnoremap ;v :vsplit<cr>

" Build / Compile related (requires a Makefile)
vnoremap <leader>w :make!<cr>
nnoremap <leader>w :make!<cr>

" C-y copies to global buffer, copying across applications
nnoremap <C-y> "+y
vnoremap <C-y> "+y

" C-l pastes from the global buffer
nnoremap <C-p> "+gP
vnoremap <C-p> "+gP
inoremap <C-p> <Esc>"+gP

" Space moves current cursor location to center of screen
nmap <space> zz
nnoremap n nzz
nnoremap N Nzz

" Block indentation (can be overridden in ftplugins)
map > :s/^/\ \ \ \ /<CR>
map < :s/^\ \ \ \ //<CR>

" push vim to the background and give shell access
map <leader>q <Esc><c-z>

" edit vimrc
map <leader>ev <Esc>:edit $MYVIMRC<cr>

" source vimrc
map <leader>sv <Esc>:source $MYVIMRC<cr>

" edit bash
map <leader>eb <Esc>:edit ~/.bashrc<cr>

" toggle relative numbers
map <leader>rn :set relativenumber!<cr>

" remove trailing characters
map <leader>tr <Esc>:%s/\ *$//g<cr><c-o>

" replace tabs with 4 spaces
map <leader>rt4 <Esc>:%s/\t/\ \ \ \ /g<cr><c-o>

" replace tabs with 2 spaces
map <leader>rt2 <Esc>:%s/\t/\ \ /g<cr><c-o>

" reload file
map <leader>re <Esc>:redraw!<cr>

" Jump to the first window (leftmost)
map <C-1> <C-w>200h

" Jump to the last window (rightmost)
map <C-\> <C-w>200l

" Center the cursor of the window
nnoremap <leader>zz :let &scrolloff=999-&scrolloff<CR>

" Show the TODO / WISH list
nnoremap <leader>dd <Esc>:Ag "TODO.*\(raajay\)"<CR>
nnoremap <leader>ee <Esc>:Ag "XXX.*\(raajay\)"<CR>

""}}} " end vim key board shortcuts


" Vim keyword mappings"{{{
inoremap TODO TODO(raajay):<Space>
inoremap XXX XXX(raajay):<Space>

" insert date at current location
iab <expr> ddt strftime("%e-%b-%Y %H:%M")
"}}}


" Filetype detection"{{{
if has("autocmd")
    autocmd BufRead,BufNewFile *.tex set ft=tex
    autocmd BufRead,BufNewFile *.gms set ft=gams
    autocmd BufRead,BufNewFile *.xtx set ft=xtx
    autocmd BufRead,BufNewFile *.lst set ft=lst
    autocmd BufRead,BufNewFile *.gradle set ft=groovy
    autocmd BufRead,BufNewFile *.md set ft=markdown
    autocmd BufRead,BufNewFile *.scala set ft=scala
    autocmd BufRead,BufNewFile _bash* set ft=sh
    autocmd BufRead,BufNewFile *.mutt set ft=muttrc
    autocmd BufRead,BufNewFile *conf set ft=conf
    autocmd BufRead,BufNewFile *.yml set ft=ansible
    autocmd BufRead,BufNewFile *.todo set ft=todo
endif
""}}}


" Vim niceties (write with sudo, autosave, remember last pos, etc..)"{{{

" Remembering the previous edits - this is a gem
set viminfo='10,\"100,:20,%,n~/.viminfo

" Remembering the last position
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") < line("$") | exe "normal! g'\"" | endif
endif

" Auto save
if has("autocmd")
    au BufLeave,FocusLost * :update
endif

" auto header insert
if has("autocmd")
    autocmd BufNewFile *.sh 0r $HOME/.vim/templates/sh.template
endif

" Sudo write
cnoremap sudow w !sudo tee % > /dev/null

" Number lines visually selected
command -range=% -nargs=? Number :<line1>,<line2>s/^/\=printf("%d<args>", line(".") - line("'<") + 1)

" Take a backup of a file
command! Bak :w %.bak
"}}}



" time out settings for redrawing the screen"{{{
set timeoutlen=3000
set ttimeoutlen=50
set updatetime=30 " time taken by bufferline to redraw
"}}}


" vim grep settings"{{{
set grepprg=grep\ -nH\ $*
" The Silver Searcher
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif
"}}}


" quickfix and location list{{{
nnoremap <leader>co <Esc>:copen<CR>
nnoremap ]q <Esc>:cnext<CR>
nnoremap [q <Esc>:cprevious<CR>
" moves the quick fix list to the bottom. Upon entering the 'qf' filetye
" execut the command to move a window to the bottom
autocmd FileType qf wincmd J

nnoremap <leader>lo <Esc>:lopen<CR>
nnoremap <leader>lp <Esc>:lprevious<CR>
nnoremap <leader>ln <Esc>:lnext<CR>
autocmd QuickFixCmdPost *grep* cwindow
""}}}


" buffer, tab and pane settings{{{
cnoreabbrev <expr> help getcmdtype() == ":" && getcmdline() == 'help' ? 'tab help' : 'help'
cnoreabbrev <expr> h getcmdtype() == ":" && getcmdline() == 'h' ? 'tab h' : 'h'
"}}}


" syntax settings {{{
autocmd Syntax * syntax keyword Todo NOTE WISH containedin=.*Comment
"}}}


" PLUGIN SETTINGS (installed via pathogen)
"
" vim-airline settings"{{{
let g:airline_theme='airlineish'
let g:airline_section_b = '%{pathshorten(getcwd())."  ".airline#util#wrap(airline#extensions#branch#get_head(),0)}'
let g:airline_section_c = '%{pathshorten(expand("%:p"))}' " full file name
let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'y', 'z', 'error', 'warning']
      \ ]

" vim-airline-symbols
if !exists('g:airline_symbols')
      let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1

" Power line symbols - just used for separation
"let g:airline_left_sep = ''
"let g:airline_right_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''

let g:airline_left_sep = ' '
let g:airline_right_sep = ' '
let g:airline_left_alt_sep = ' '
let g:airline_right_alt_sep = ' '
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" Not sure what exactly happens in the next command. It is possible that the
" entire section is removed if window width is less than 20
"let g:airline#extensions#default#section_truncate_width = { 'c' : 20 }
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'VB',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }
""}}}

" vim-airline-tabline settings"{{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 1       " show buffers in the tabline
let g:airline#extensions#tabline#tab_nr_type = 2        " splits and tab number
let g:airline#extensions#tabline#buffer_idx_mode = 1    " allow navigation using hot keys
let g:airline#extensions#tabline#buffer_nr_format = '%s: '
" mappings to use for selecting buffers
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

let g:airline#extensions#bufferline#enabled = 0
let g:airline#extensions#bufferline#overwrite_variables = 0

let g:airline#extensions#whitespace#trailing_format = 'tr[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mi[%s]'
""}}}

" Command-T settings"{{{,*/third_party/*
if has('win32') || has('win64')
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.class,*.pyc
else
    set wildignore+=*/tmp/*,*.so,*.zip,*.swp,*.class,*.pyc,*/bin/*,*/project/*,*/target/*,*/.git/*,*/third_party/*,*.o,*.out,*.JPEG,*.tar,*.tar.gz
endif
let g:CommandTMaxDepth = 20
let g:CommandTMaxHeight = 20
let g:CommandTMatchWindowReverse = 1
let g:CommandTTraverseSCM='pwd'
map <leader>ff <Esc>:CommandT<CR>
map <leader>fj <Esc>:CommandTJump<CR>
""}}}

" vim-gitgutter settings"{{{
let g:gitgutter_map_keys = 0
nmap <leader>hs <Plug>GitGutterStageHunk
nmap <leader>hr <Plug>GitGutterRevertHunk
nmap <leader>hd <Plug>GitGutterPreviewHunk
nmap <leader>hh <Plug>GitGutterNextHunk
nmap <leader>hp <Plug>GitGutterPrevHunk
let g:gitgutter_realtime=0
let g:gitgutter_eager=0
""}}}

" vim-fugitive settings"{{{
nmap <leader>gs <Esc>:Gstatus<CR>
nmap <leader>gc <Esc>:Gcommit -m<Space>""<left>
nmap <leader>gp <Esc>:Gpush<CR>
nmap <leader>gl <Esc>:Glog -n 10 --<CR>
set previewheight=30
" make the status window the bottom most one
autocmd FileType gitcommit wincmd J
""}}}


" Source private VIMRC
if !empty(glob("~/_vimrc_private"))
    source ~/_vimrc_private
endif
" Source local VIMRC
if !empty(glob(".localvimrc"))
    source .localvimrc
endif

call pathogen#interpose('bundle/vim-airline')
call pathogen#interpose('bundle/vim-airline-themes')
call pathogen#interpose('bundle/vim-airlineish')
call pathogen#interpose('bundle/vim-gitgutter')
call pathogen#interpose('bundle/vim-fugitive')
call pathogen#interpose('bundle/delmitmate')
call pathogen#interpose('bundle/command-t')
call pathogen#interpose('bundle/surround')
call pathogen#interpose('bundle/vim-ag')
call pathogen#interpose('bundle/vimspectr')

colorscheme vimspectrgrey-light
